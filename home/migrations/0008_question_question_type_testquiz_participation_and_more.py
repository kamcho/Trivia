# Generated by Django 4.2.13 on 2025-09-19 08:38

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('home', '0007_testquiz_level'),
    ]

    operations = [
        migrations.AddField(
            model_name='question',
            name='question_type',
            field=models.CharField(choices=[('single', 'Single Choice'), ('multiple', 'Multiple Select'), ('open', 'Open Ended')], default='single', max_length=20),
        ),
        migrations.AddField(
            model_name='testquiz',
            name='participation',
            field=models.CharField(choices=[('Individual', 'Individual'), ('Group', 'Group'), ('All', 'All')], default='All', max_length=100),
        ),
        migrations.CreateModel(
            name='TestQuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('attempt_number', models.PositiveIntegerField(default=1, help_text='Incremented per user per quiz')),
                ('session_id', models.CharField(blank=True, help_text='for unauthenticated users', max_length=40, null=True)),
                ('score', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('started', 'Started'), ('completed', 'Completed'), ('expired', 'Expired')], default='started', max_length=10)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='home.testquiz')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Test Quiz Attempt',
                'verbose_name_plural': 'Test Quiz Attempts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupTestQuizAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('attempt_number', models.PositiveIntegerField(default=1, help_text='Incremented per group per quiz')),
                ('score', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('started', 'Started'), ('completed', 'Completed'), ('expired', 'Expired')], default='started', max_length=10)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to='home.triviagroup')),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiated_group_quiz_attempts', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_attempts', to='home.testquiz')),
            ],
            options={
                'verbose_name': 'Group Test Quiz Attempt',
                'verbose_name_plural': 'Group Test Quiz Attempts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('text_answer', models.TextField(blank=True, null=True)),
                ('points_awarded', models.PositiveIntegerField(default=0)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='home.grouptestquizattempt')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='home.triviagroup')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_responses', to='home.question')),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_question_responses', to=settings.AUTH_USER_MODEL)),
                ('selected_choices', models.ManyToManyField(blank=True, related_name='group_responses_selected', to='home.choice')),
            ],
            options={
                'verbose_name': 'Group Response',
                'verbose_name_plural': 'Group Responses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('text_answer', models.TextField(blank=True, null=True)),
                ('points_awarded', models.PositiveIntegerField(default=0)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='home.testquizattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_responses', to='home.question')),
                ('selected_choices', models.ManyToManyField(blank=True, related_name='user_responses_selected', to='home.choice')),
            ],
            options={
                'verbose_name': 'User Response',
                'verbose_name_plural': 'User Responses',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['attempt', 'question'], name='home_userre_attempt_2d18d5_idx'), models.Index(fields=['question'], name='home_userre_questio_85a5ae_idx')],
                'unique_together': {('attempt', 'question')},
            },
        ),
        migrations.AddIndex(
            model_name='testquizattempt',
            index=models.Index(fields=['quiz', 'user'], name='home_testqu_quiz_id_898c20_idx'),
        ),
        migrations.AddIndex(
            model_name='testquizattempt',
            index=models.Index(fields=['status'], name='home_testqu_status_b498ed_idx'),
        ),
        migrations.AddIndex(
            model_name='testquizattempt',
            index=models.Index(fields=['created_at'], name='home_testqu_created_7847a6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testquizattempt',
            unique_together={('quiz', 'user', 'attempt_number')},
        ),
        migrations.AddIndex(
            model_name='grouptestquizattempt',
            index=models.Index(fields=['quiz', 'group'], name='home_groupt_quiz_id_f2e757_idx'),
        ),
        migrations.AddIndex(
            model_name='grouptestquizattempt',
            index=models.Index(fields=['status'], name='home_groupt_status_29d301_idx'),
        ),
        migrations.AddIndex(
            model_name='grouptestquizattempt',
            index=models.Index(fields=['created_at'], name='home_groupt_created_41b5f5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grouptestquizattempt',
            unique_together={('quiz', 'group', 'attempt_number')},
        ),
        migrations.AddIndex(
            model_name='groupresponse',
            index=models.Index(fields=['attempt', 'question'], name='home_groupr_attempt_8fd680_idx'),
        ),
        migrations.AddIndex(
            model_name='groupresponse',
            index=models.Index(fields=['question'], name='home_groupr_questio_53301d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupresponse',
            unique_together={('attempt', 'question')},
        ),
    ]
