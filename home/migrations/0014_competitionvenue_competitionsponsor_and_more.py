# Generated by Django 4.2.13 on 2025-09-22 13:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('home', '0013_competitionmedia_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompetitionVenue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(default='Kenya', max_length=100)),
                ('map_link', models.URLField(blank=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('room', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='venues', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Venue',
                'verbose_name_plural': 'Competition Venues',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionSponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='competition_media/sponsors/')),
                ('website', models.URLField(blank=True)),
                ('tier', models.CharField(choices=[('gold', 'Gold'), ('silver', 'Silver'), ('bronze', 'Bronze'), ('partner', 'Partner')], default='partner', max_length=20)),
                ('blurb', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsors', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Sponsor',
                'verbose_name_plural': 'Competition Sponsors',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionSocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('network', models.CharField(choices=[('facebook', 'Facebook'), ('x', 'X/Twitter'), ('instagram', 'Instagram'), ('youtube', 'YouTube'), ('tiktok', 'TikTok'), ('other', 'Other')], default='other', max_length=20)),
                ('url', models.URLField()),
                ('display_name', models.CharField(blank=True, max_length=100)),
                ('order', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Social Link',
                'verbose_name_plural': 'Competition Social Links',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionScheduleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('location_hint', models.CharField(blank=True, max_length=200)),
                ('order', models.PositiveIntegerField(default=1)),
                ('is_public', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_items', to='home.competition')),
            ],
            options={
                'verbose_name': 'Schedule Item',
                'verbose_name_plural': 'Schedule Items',
                'ordering': ['start_at', 'order'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('file', models.FileField(blank=True, null=True, upload_to='competition_media/resources/')),
                ('url', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Resource',
                'verbose_name_plural': 'Competition Resources',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionRegistrationWindow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('opens_at', models.DateTimeField()),
                ('closes_at', models.DateTimeField()),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Leave blank for unlimited', null=True)),
                ('fee_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fee_currency', models.CharField(default='KES', max_length=10)),
                ('terms_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_windows', to='home.competition')),
            ],
            options={
                'verbose_name': 'Registration Window',
                'verbose_name_plural': 'Registration Windows',
                'ordering': ['opens_at'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('policy_type', models.CharField(choices=[('refund', 'Refund Policy'), ('code', 'Code of Conduct'), ('privacy', 'Privacy'), ('other', 'Other')], default='other', max_length=20)),
                ('content', models.TextField()),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policies', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Policy',
                'verbose_name_plural': 'Competition Policies',
                'ordering': ['policy_type', 'effective_date'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionFAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.CharField(max_length=300)),
                ('answer', models.TextField()),
                ('order', models.PositiveIntegerField(default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition FAQ',
                'verbose_name_plural': 'Competition FAQs',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionEligibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('min_age', models.PositiveIntegerField(blank=True, null=True)),
                ('max_age', models.PositiveIntegerField(blank=True, null=True)),
                ('allowed_levels', models.JSONField(blank=True, default=list, help_text='Select one or more levels')),
                ('allowed_participation', models.CharField(choices=[('Individual', 'Individual'), ('Group', 'Group'), ('All', 'All')], default='All', max_length=20)),
                ('prerequisites', models.TextField(blank=True)),
                ('eligibility_notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('competition', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='eligibility', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Eligibility',
                'verbose_name_plural': 'Competition Eligibility',
            },
        ),
        migrations.CreateModel(
            name='CompetitionContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=150)),
                ('role', models.CharField(choices=[('organizer', 'Organizer'), ('support', 'Support'), ('press', 'Press'), ('other', 'Other')], default='organizer', max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=50)),
                ('preferred_channel', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('whatsapp', 'WhatsApp'), ('telegram', 'Telegram'), ('other', 'Other')], default='email', max_length=20)),
                ('is_primary', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='home.competition')),
            ],
            options={
                'verbose_name': 'Competition Contact',
                'verbose_name_plural': 'Competition Contacts',
                'ordering': ['-is_primary', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CompetitionBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('waitlisted', 'Waitlisted')], default='pending', max_length=10)),
                ('booked_at', models.DateTimeField(auto_now_add=True)),
                ('paid', models.BooleanField(default=False)),
                ('payment_ref', models.CharField(blank=True, max_length=100)),
                ('num_slots', models.PositiveIntegerField(default=1)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='home.competition')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='competition_bookings', to='home.triviagroup')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='competition_bookings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Competition Booking',
                'verbose_name_plural': 'Competition Bookings',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['competition', 'status'], name='home_compet_competi_99df9e_idx')],
            },
        ),
    ]
